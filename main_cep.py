# Importa a biblioteca requests, usada para fazer requisi√ß√µes HTTP
import requests

# Fun√ß√£o que recebe um CEP e busca o endere√ßo correspondente na BrasilAPI
def buscar_endereco(cep):
    # Monta a URL da requisi√ß√£o usando o CEP informado
    url = f"https://brasilapi.com.br/api/cep/v1/{cep}"
    
    try:
        # Realiza a requisi√ß√£o GET para a API
        response = requests.get(url)

        # Lan√ßa erro se o status HTTP for 4xx ou 5xx
        response.raise_for_status()

        # Converte a resposta JSON para um dicion√°rio Python
        dados = response.json()
        
        # Exibe os dados do endere√ßo encontrados
        print("\nüìç Endere√ßo Encontrado:")
        print(f"CEP: {dados.get('cep')}")
        print(f"Rua: {dados.get('street')}")
        print(f"Bairro: {dados.get('neighborhood')}")
        print(f"Cidade: {dados.get('city')}")
        print(f"Estado: {dados.get('state')}")

    # Captura erros HTTP, como CEP n√£o encontrado
    except requests.exceptions.HTTPError:
        print("‚ùå CEP n√£o encontrado ou inv√°lido.")

    # Captura outros tipos de erros na requisi√ß√£o
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro ao acessar a API: {e}")

# Bloco principal: executado quando o script √© rodado diretamente
if __name__ == "__main__":
    print("=== Buscar Endere√ßo pelo CEP ===")
    
    # Pede ao usu√°rio que digite o CEP
    cep = input("Digite um CEP (somente n√∫meros): ").strip()
    
    # Remove tra√ßos e espa√ßos do CEP (caso o usu√°rio digite com "-")
    cep = cep.replace("-", "").replace(" ", "")

    # Verifica se o CEP tem 8 d√≠gitos num√©ricos
    if len(cep) == 8 and cep.isdigit():
        # Chama a fun√ß√£o para buscar o endere√ßo
        buscar_endereco(cep)
    else:
        # Informa que o CEP est√° inv√°lido
        print("‚ùå CEP inv√°lido. Digite exatamente 8 d√≠gitos.")
